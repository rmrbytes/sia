# nginx.conf

# Defines the user and group that the Nginx worker processes run as.
# 'nginx' is the default user created in the Nginx Docker image.
user  nginx;

# Sets the number of worker processes. 'auto' means Nginx will
# automatically detect the number of available CPU cores and set
# the worker processes accordingly.
worker_processes  auto;

# Specifies the file where Nginx logs errors.
# The 'warn' parameter sets the minimum severity level of messages to log.
error_log  /var/log/nginx/error.log warn;

# Specifies the file where Nginx stores its process ID (PID).
pid        /var/run/nginx.pid;

# Events block contains directives that affect the general operation
# of Nginx worker processes.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections  1024;
}

# The 'http' block contains directives for handling HTTP web traffic.
http {
    # Includes MIME types for files served by Nginx.
    include       /etc/nginx/mime.types;

    # Sets the default MIME type for files whose types are not specified in the 'mime.types' file.
    default_type  application/octet-stream;

    # Enables or disables the use of sendfile(). 'on' uses the sendfile() system call
    # which can improve performance when serving static files.
    sendfile        on;

    # Sets the timeout for keep-alive connections with the client.
    # A higher value allows clients to keep connections open longer.
    keepalive_timeout  65;

    # Gzip compression settings to reduce the size of the responses and improve performance.
    # 'gzip on' enables gzip compression.
    gzip on;

    # Specifies the MIME types that will be compressed.
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Defines a group of servers (upstream) that can be referenced in 'proxy_pass'.
    # This is used to load balance or proxy requests to backend servers.
    upstream api_server {
        # Specifies the backend server's hostname (service name in Docker network) and port.
        server api-server:8080;
    }

    # Server block defines a virtual server that handles incoming HTTP requests.
    server {
        # Listens on port 80 (HTTP).
        listen 80;

        # Defines the server name (domain or IP) that the server block responds to.
        # 'localhost' means it will respond to requests to 'localhost'.
        server_name localhost;

        # Redirects all HTTP requests to HTTPS.
        # Uncomment the following line to enable redirection.
        # return 301 https://$host$request_uri;

        # Listens on port 443 (HTTPS).
        # Uncomment the following lines to enable HTTPS.
        # listen 443 ssl;
        # server_name your_domain.com;

        # Specifies the paths to the SSL certificate and key files.
        # Uncomment and provide your SSL certificate paths to enable HTTPS.
        # ssl_certificate     /etc/nginx/ssl/server.crt;
        # ssl_certificate_key /etc/nginx/ssl/server.key;

        # Configures the SSL protocols and ciphers.
        # Uncomment and adjust as needed for security requirements.
        # ssl_protocols       TLSv1.2 TLSv1.3;
        # ssl_ciphers         HIGH:!aNULL:!MD5;

        # Location block for serving static files.
        location / {
            # Sets the root directory for requests.
            root /usr/share/nginx/html;

            # Tries to serve the requested URI, if not found, serves 'index.html'.
            try_files $uri /index.html;
        }

        # Location block for proxying API requests to the backend API server.
        location /api/ {
            # Proxies requests to the 'api_server' upstream defined earlier.
            proxy_pass http://api-server:8080/api/;

            # Preserves the original 'Host' header from the client.
            proxy_set_header Host $host;

            # Forwards the client's real IP address to the backend server.
            proxy_set_header X-Real-IP $remote_addr;

            # --- CORS Settings ---

            # Adds the 'Access-Control-Allow-Origin' header to the response.
            # '*' allows all origins; specify domains as needed for security.
            # Uncomment to enable CORS.
            # add_header 'Access-Control-Allow-Origin' '*' always;

            # Specifies the allowed HTTP methods.
            # Uncomment to enable.
            # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;

            # Specifies the allowed HTTP headers.
            # Uncomment to enable.
            # add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;

            # Handles preflight OPTIONS requests by returning a 204 No Content response.
            if ($request_method = OPTIONS ) {
                return 204;
            }
        }

        # Additional server blocks or configurations can be added here.
    }
}
